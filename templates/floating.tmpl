{{define "floating"}}{{template "header" .}}
// {{ .Name }} is {{ .Builtin }} floating-point signal.
type {{ .Name }} struct {
	buffer []{{ .Builtin }}
	channels
}

// {{ .Name }} allocates a new sequential {{ .Builtin }} signal buffer.
func (a Allocator) {{ .Name }}() {{ .Interface }} {
	return {{ .Name }}{
		buffer:   make([]{{ .Builtin }}, a.Channels*a.Length, a.Channels*a.Capacity),
		channels: channels(a.Channels),
	}
}

// AppendSample appends sample at the end of the buffer.
// Sample is not appended if buffer capacity is reached.
func (s {{ .Name }}) AppendSample(value {{ .SampleType }}) {{ .Interface }} {
	if len(s.buffer) == cap(s.buffer) {
		return s
	}
	s.buffer = append(s.buffer, {{ .Builtin }}(value))
	return s
}

// SetSample sets sample value for provided position.
func (s {{ .Name }}) SetSample(pos int, value {{ .SampleType }}) {
	s.buffer[pos] = {{ .Builtin }}(value)
}

// Get{{ .Name }} selects a new sequential {{ .Builtin }} signal buffer.
// from the pool.
func (p *Pool) Get{{ .Name }}() {{ .Interface }} {
	if p == nil {
		return nil
	}
	return p.{{ .Pool }}.Get().({{ .Interface }})
}
{{template "signal" .}}
{{end}}

{{define "floating-tests"}}package signal_test

// Code generated by go generate; DO NOT EDIT.
// This file was generated by robots at
// {{ .Timestamp }}

import (
	"testing"

	"pipelined.dev/signal"
)

func Test{{ .Name }}(t *testing.T) {
	t.Run("{{ .Builtin }}", testOk(
		signal.Allocator{
			Channels: 3,
			Capacity: 2,
		}.{{ .Name }}().
			Append(signal.WriteStriped{{ .Name }}(
				[][]{{ .Builtin }}{
					{},
					{1, 2, 3},
					{11, 12, 13, 14},
				},
				signal.Allocator{
					Channels: 3,
					Capacity: 3,
				}.{{ .Name }}()),
			).
			Slice(1, 3),
		expected{
			length:   2,
			capacity: 4,
			data: [][]{{ .Builtin }}{
				{0, 0},
				{2, 3},
				{12, 13},
			},
		},
	))
}
{{end}}