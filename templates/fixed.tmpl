{{define "fixed"}}{{template "header" .}}
// {{ .Name }} is {{ .Builtin }} {{ .Interface }} fixed-point signal.
type {{ .Name }} struct {
	buffer []{{ .Builtin }}
	channels
	bitDepth
}

// {{ .Name }} allocates a new sequential {{ .Builtin }} signal buffer.
func (a Allocator) {{ .Name }}(bd BitDepth) {{ .Interface }} {
	return {{ .Name }}{
		buffer:   make([]{{ .Builtin }}, a.Channels*a.Length, a.Channels*a.Capacity),
		channels: channels(a.Channels),
		bitDepth: limitBitDepth(bd, {{ .MaxBitDepth }}),
	}
}

func (s {{ .Name }}) setBitDepth(bd BitDepth) {{ .Interface }} {
	s.bitDepth = limitBitDepth(bd, {{ .MaxBitDepth }})
	return s
}

// AppendSample appends sample at the end of the buffer.
// Sample is not appended if buffer capacity is reached.
// Sample values are capped by maximum value of the buffer bit depth.
func (s {{ .Name }}) AppendSample(value {{ .SampleType }}) {{ .Interface }} {
	if len(s.buffer) == cap(s.buffer) {
		return s
	}
	s.buffer = append(s.buffer, {{ .Builtin }}(s.BitDepth().{{ .Interface }}Value(value)))
	return s
}

// SetSample sets sample value for provided position.
// Sample values are capped by maximum value of the buffer bit depth.
func (s {{ .Name }}) SetSample(pos int, value {{ .SampleType }}) {
	s.buffer[pos] = {{ .Builtin }}(s.BitDepth().{{ .Interface }}Value(value))
}

// Get{{ .Name }} selects a new sequential {{ .Builtin }} signal buffer.
// from the pool.
func (p *Pool) Get{{ .Name }}(bd BitDepth) {{ .Interface }} {
	if p == nil {
		return nil
	}
	return p.{{ .Pool }}.Get().({{ .Interface }}).setBitDepth(bd)
}
{{template "signal" .}}
{{end}}